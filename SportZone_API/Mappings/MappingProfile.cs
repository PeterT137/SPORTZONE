using AutoMapper;
using SportZone_API.DTOs;
using SportZone_API.Models;

namespace SportZone_API.Mappings
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // Field Mappings
            CreateMap<FieldCreateDTO, Field>()
                .ForMember(dest => dest.FieldId, opt => opt.Ignore()) // Auto-generated by DB
                .ForMember(dest => dest.Category, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.Fac, opt => opt.Ignore()); // Navigation property

            CreateMap<FieldUpdateDTO, Field>()
                .ForMember(dest => dest.FieldId, opt => opt.Ignore())
                .ForMember(dest => dest.FacId, opt => opt.Ignore()) // Cannot change facility
                .ForMember(dest => dest.Category, opt => opt.Ignore())
                .ForMember(dest => dest.Fac, opt => opt.Ignore())
                .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null)); // Only map non-null values

            CreateMap<Field, FieldResponseDTO>()
                .ForMember(dest => dest.CategoryName, opt => opt.MapFrom(src => src.Category != null ? src.Category.CategoryFieldName : null))
                .ForMember(dest => dest.FacilityAddress, opt => opt.MapFrom(src => src.Fac != null ? src.Fac.Address : null));

            // Facility Mappings
            //CreateMap<FacilityCreateDTO, Facility>()
            //    .ForMember(dest => dest.FacId, opt => opt.Ignore()) // Auto-generated by DB
            //    .ForMember(dest => dest.UId, opt => opt.Ignore()) // Will be set in service
            //    .ForMember(dest => dest.Fields, opt => opt.Ignore()) // Navigation property
            //    .ForMember(dest => dest.Images, opt => opt.Ignore()) // Navigation property
            //    .ForMember(dest => dest.UIdNavigation, opt => opt.Ignore()); // Navigation property

            //CreateMap<FacilityUpdateDTO, Facility>()
            //    .ForMember(dest => dest.FacId, opt => opt.Ignore())
            //    .ForMember(dest => dest.UId, opt => opt.Ignore())
            //    .ForMember(dest => dest.Fields, opt => opt.Ignore())
            //    .ForMember(dest => dest.Images, opt => opt.Ignore())
            //    .ForMember(dest => dest.UIdNavigation, opt => opt.Ignore())
            //    .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null)); // Only map non-null values

            //CreateMap<Facility, FacilityResponseDTO>()
            //    .ForMember(dest => dest.OwnerName, opt => opt.MapFrom(src => src.UIdNavigation != null ? src.UIdNavigation.Name : null))
            //    .ForMember(dest => dest.FieldCount, opt => opt.MapFrom(src => src.Fields.Count))
            //    .ForMember(dest => dest.ImageUrls, opt => opt.MapFrom(src => src.Images.Select(img => img.ImageUrl).ToList()));

            // Category Mappings
            CreateMap<CategoryField, CategoryFieldResponseDTO>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.CategoryFieldId))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.CategoryFieldName));
        }
    }

    // Additional DTO for Category response
    public class CategoryFieldResponseDTO
    {
        public int Id { get; set; }
        public string? Name { get; set; }
    }
}